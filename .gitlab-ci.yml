image: alpine:latest

stages:
    - build

before_script:
    - apk update
    - apk add zip
    - apk add git

build:
    stage: build
    script:
        - echo "hello:"
        - ls jil/dev | head -n 1 ##latest files
        - ls -lrt ##list all directory
        - ls -l | wc -l ##list number of files
        - ls jil/dev | wc -l ##list number of files in jil folder
        - ls jil/dev ##list all files in the directory
        - find jil/dev -name "*.jil" | wc -l ##finding number of files with specific extension 
        - find jil/dev -name "*.jil" ##finds and list out the file with .jil extension
        - find jil/prod -name "*.sh" | wc -l ##finds the file with .sh... if file not found with .sh extension then it will display as 0
        - find jil/dev/* -iname "*.jil" -mtime -1 ## fetch the commited files for past 24hrs 
        - find jil/dev/* -maxdepth 1 -mtime -1 ## fetch the commited files for past 24hrs
        - find jil/dev/* -iname "*.jil" -mtime 1 ## fetch the commited files for exactly 1day
        - FILES=$(find jil/dev -name "*.jil" | wc -l) ##storing the values in variable 
        - echo "There are $FILES in dev env." 
        - grep -oP "code/+\K\w+" a.txt ##to find a next word after the input value
        - dirname $(find dirname -name '*.jil') ##finding only the directory for the particular file
        - sed -i "s#<---word present the file--->#<---replacement word--->#g" <---path of the file---> ##command to replace a word in a file
        
        - |
            if [ $FILES == 2 ]
            then
                echo "Sunday is the holiday"
            else
                echo "wrong cmd"
            fi
        
        - | 
            abc="sample1.jil"
            for dirname in $(ls -d jil/dev/*)  ##listing all files and storing in variable by using for loop
            do
                echo "$dirname"
                if cmp -s "$dirname" "jil/dev/$abc"; ##comparing files (should give the path for the file which has to be compared with)
                then
                    echo "file found"
                else 
                    echo "file not found"
                fi
            done
        
        - | ## THIS METHOD IS TO FIND THE FILES BY COMPARING
            for dirname in $(cat raw.md)  ##read the file and store the values in variable by using for loop
            do
                echo "$dirname"
                for dir in $(ls -d jil/dev/*) ##listing all files and storing in variable by using for loop
                do
                    echo $dir
                    if cmp -s "$dir" "jil/dev/$dirname"; ##comparing files (should give the path for the file which has to be compared with)
                    then
                        echo "file found"
                        echo "*****"
                        cp $dir code ##copyig the files from $dir to code directory
                        ls code
                        echo "*****"
                        zip -r arti.zip code/* ##zipping the whole code folder **for zipping only files use cmd -> zip -j arti.zip $dir **  
                    else 
                        echo "file not found"
                    fi
                done
            done
        
        - | ##THIS METHOD IS TO FIND THE FILES WITHOUT COMPARING... USING "FIND" COMMAND. **NOTE: PIPELINE WILL FAIL IF THE FILE IS NOT AVAILABLE WHICH IS MENTIONED IN .md FILE** 
            for dirname in $(cat raw.md)  
            do
                var=$(find jil/dev -name $dirname)
                zip -j arti.zip $var
            done
            
        - | ##THIS METHOD IS TO FIND THE FILES BY FINDING THE DIFFERENCE BETWEEN LATEST AND PREVIOUS COMMITS... USING "GIT" COMMAND. **NOTE: PIPELINE WILL PASS EVENTHOUGH FILE IS NOT PRESENT**
            for file in $(git diff --diff-filter=A --name-only "$CI_COMMIT_BEFORE_SHA" "$CI_COMMIT_SHA" -name "*.jil")
            do
                zip -j arti.zip $file
            done
            
        - | ##ARRAY
            env: "dev qa prod"
            for array in $env
            do  
                echo "$array"
            done

    artifacts:
        paths:
            - arti.zip


##USING FUNCTION IN GITLAB YAML FILE
.build_fn: &build_fn |
  function eol() {
    elm="hello"
    elm1="world"
    echo "elm '$elm' elm1 '$elm1'" >> file.txt
  }

.build:
  stage: build
  script:
    - *build_fn
    - eol ## function name
  artifacts:
    paths:
      - file.txt

##SEND EMAIL USING ***LINUX***     ---Comes with the given user name---
.build:
    stage: build
    before_script:
        - apk add bash
        - apk add ssmtp
    script:
        - |
            cat > /etc/ssmtp/ssmtp.conf << EOF
            root=<---email id--->@outlook.com ##provide an outlook email id
            mailhub=smtp.outlook.com:587 ##provide correct mailhub for required server... search in GOOGLE
            hostname=localhost  
            FromLineOverride=YES
            EOF
        - |
            cat > mail.txt << EOF
            To: ##provide an outlook email id to be sent
            From: ##provide an outlook email id for from
            Subject: Mail with SSMTP
    
            Hello, this is a test mail.
            EOF
        - ssmtp <---email id--->@outlook.com < mail.txt
        
##SEND EMAIL USING ***LINUX***     ---Comes with the root user---
.build:
    stage: build
    before_script:
        - apk add bash
        - apk add ssmtp
    script:
        - cat <---file_name---> | ssmtp <---email id--->@outlook.com ## file name contains the body of the email ***here subject cannot be mentioned***

##SEND EMAIL USING ***POWERSHELL***
variables:
    Tolist: ## provide the email address to be sent
    Cclist: ## provide the email address to be copied
    Fromlist: ## provide the email address to be sent from
.Base-EMail:
  stage: EMail
  script:
    - '[string[]]$ToEmailList = $Tolist.Split(",")'
    - '[string[]]$CcEmailList = $Cclist.Split(",")'
    - Send-MailMessage
        -To $ToEmailList
        -CC $CcEmailList
        -From "$Fromlist" 
        -Subject "SUBJECT"
        -SmtpServer "mail.lnc.com"
        -BodyAsHtml "BODY OF THE MAIL
        <br />
        <br /> <b>DB URL = $dburl</b>
        <br />
        <br /> Thanks"
        -Attachments "$CI_PROJECT_DIR/Publish_1.0-$CI_PIPELINE_ID.sql"
  tags:
    - windows